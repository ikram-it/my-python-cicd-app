# .github/workflows/main.yml

name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger on pushes to the 'main' branch
  pull_request:
    branches:
      - main # Trigger on pull requests to the 'main' branch

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3 # Action to check out your repository code

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2 # Action to set up Docker Buildx for advanced build features

    - name: Log in to Docker Hub (Optional)
      # This step is optional and would be needed if you want to push to Docker Hub.
      # You would need to set up DOCKER_USERNAME and DOCKER_PASSWORD as GitHub Secrets.
      # For this example, we'll just build the image.
      # uses: docker/login-action@v2
      # with:
      #   username: ${{ secrets.DOCKER_USERNAME }}
      #   password: ${{ secrets.DOCKER_PASSWORD }}
      run: echo "Skipping Docker Hub login for this example."

    - name: Build and Tag Docker Image
      # Builds the Docker image based on the Dockerfile in the root directory.
      # The image is tagged with the current Git SHA (short version) for uniqueness.
      # Replace 'your-dockerhub-username/your-repo-name' with your actual Docker Hub details.
      run: |
        IMAGE_NAME="my-python-app" # Name of your Docker image
        IMAGE_TAG="${{ github.sha }}" # Tag with commit SHA

        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
        echo "Successfully built Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"

    - name: Run Docker Image (Test locally in CI)
      # This step is just for demonstration within the CI pipeline to show the image runs.
      # In a real scenario, you might run tests against the container.
      run: |
        IMAGE_NAME="my-python-app"
        IMAGE_TAG="${{ github.sha }}"
        CONTAINER_ID=$(docker run -d -p 5000:5000 ${IMAGE_NAME}:${IMAGE_TAG})
        echo "Container ID: ${CONTAINER_ID}"
        # Give the container a moment to start
        sleep 5
        # Test the health endpoint
        curl http://localhost:5000/health
        # Stop and remove the container
        docker stop ${CONTAINER_ID}
        docker rm ${CONTAINER_ID}

    - name: Push Docker Image to Registry (Optional)
      # This step would push the image to Docker Hub or another registry.
      # Uncomment and configure if you set up Docker Hub login above.
      # run: |
      #   IMAGE_NAME="your-dockerhub-username/your-repo-name" # Must match image name from build step
      #   IMAGE_TAG="${{ github.sha }}"
      #   docker push ${IMAGE_NAME}:${IMAGE_TAG}
      #   echo "Successfully pushed Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
      run: echo "Skipping Docker Image push for this example."

    - name: Deployment Simulation
      # This step represents a deployment. In a real CI/CD, this could be
      # deploying to Kubernetes, a VM, or a cloud service.
      run: echo "Simulating deployment of my-python-app:${{ github.sha }} to production!"
      # Add your actual deployment commands here.
      # For example:
      # - name: Deploy to Kubernetes
      #   uses: actions-hub/kubectl@master
      #   env:
      #     KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
      #   with:
      #     args: apply -f k8s/deployment.yaml


