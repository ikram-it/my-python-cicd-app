# .github/workflows/main.yml

name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger on pushes to the 'main' branch
  pull_request:
    branches:
      - main # Trigger on pull requests to the 'main' branch

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3 # Action to check out your repository code

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2 # Action to set up Docker Buildx for advanced build features

    - name: Log in to Docker Hub
      # This step logs in to Docker Hub using secrets.
      # You MUST set up DOCKER_USERNAME and DOCKER_PASSWORD as GitHub Secrets.
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Tag Docker Image
      # Builds the Docker image based on the Dockerfile in the root directory.
      # The image is tagged with the current Git SHA (short version) for uniqueness
      # and also with 'latest' for the main branch.
      # IMPORTANT: Replace 'your-dockerhub-username/my-python-app' with your actual Docker Hub username and repository name.
      run: |
        DOCKERHUB_REPO="muhiuddin/my-python-app" # <-- !!! IMPORTANT: Update this line !!!
        IMAGE_TAG="${{ github.sha }}" # Tag with commit SHA

        docker build -t ${DOCKERHUB_REPO}:${IMAGE_TAG} .
        # Also tag with 'latest' for the main branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          docker tag ${DOCKERHUB_REPO}:${IMAGE_TAG} ${DOCKERHUB_REPO}:latest
          echo "Tagged as latest: ${DOCKERHUB_REPO}:latest"
        fi
        echo "Successfully built Docker image: ${DOCKERHUB_REPO}:${IMAGE_TAG}"


    - name: Run Docker Image (Test locally in CI)
      # This step is just for demonstration within the CI pipeline to show the image runs.
      # In a real scenario, you might run tests against the container.
      run: |
        DOCKERHUB_REPO="muhiuddin/my-python-app" # <-- !!! IMPORTANT: Update this line !!!
        IMAGE_TAG="${{ github.sha }}"
        CONTAINER_ID=$(docker run -d -p 5000:5000 ${DOCKERHUB_REPO}:${IMAGE_TAG})
        echo "Container ID: ${CONTAINER_ID}"
        # Give the container a moment to start
        sleep 5
        # Test the health endpoint
        curl http://localhost:5000/health
        # Stop and remove the container
        docker stop ${CONTAINER_ID}
        docker rm ${CONTAINER_ID}

    - name: Push Docker Image to Registry
      # This step pushes the image to Docker Hub.
      # It pushes both the SHA-tagged image and the 'latest' tag if on the main branch.
      run: |
        DOCKERHUB_REPO="muhiuddin/my-python-app" # <-- !!! IMPORTANT: Update this line !!!
        IMAGE_TAG="${{ github.sha }}"

        docker push ${DOCKERHUB_REPO}:${IMAGE_TAG}
        echo "Successfully pushed Docker image: ${DOCKERHUB_REPO}:${IMAGE_TAG}"

        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          docker push ${DOCKERHUB_REPO}:latest
          echo "Successfully pushed Docker image with latest tag: ${DOCKERHUB_REPO}:latest"
        fi


    - name: Deployment Simulation
      # This step represents a deployment. In a real CI/CD, this could be
      # deploying to Kubernetes, a VM, or a cloud service.
      run: echo "Simulating deployment of ${DOCKERHUB_REPO}:${{ github.sha }} to production!"
      # Add your actual deployment commands here.
      # For example:
      # - name: Deploy to Kubernetes
      #   uses: actions-hub/kubectl@master
      #   env:
      #     KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
      #   with:
      #     args: apply -f k8s/deployment.yaml
